// Generated by CoffeeScript 1.6.2
var Section, nofactor,
  __slice = [].slice;

nofactor = require("nofactor");

Section = (function() {
  /*
  */
  Section.prototype.__isLoafSection = true;

  /*
  */


  function Section(nodeFactory) {
    this.nodeFactory = nodeFactory != null ? nodeFactory : nofactor["default"];
    this.start = this.nodeFactory.createTextNode("");
    this.end = this.nodeFactory.createTextNode("");
    this._addParent();
  }

  /*
  */


  Section.prototype.replace = function(node) {
    node.parentNode.insertBefore(this.toFragment(), node);
    return node.parentNode.removeChild(node);
  };

  /*
  */


  Section.prototype.show = function() {
    var allElements, childLoad, node, _i, _len, _ref;

    if (!this._detached) {
      return this;
    }
    this._addParent();
    allElements = [];
    _ref = this._detached;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      node = _ref[_i];
      if (node.parentNode && (childLoad = node.parentNode._loaf)) {
        node.parentNode._loaf = void 0;
        allElements.push(childLoad.toFragment());
      } else {
        allElements.push(node);
      }
    }
    this.append.apply(this, allElements);
    this._detached = void 0;
    return this;
  };

  /*
  */


  Section.prototype.hide = function() {
    this._detached = this.removeAll();
    return this;
  };

  /*
  */


  Section.prototype.removeAll = function() {
    var child, children, _i, _len;

    children = this.getChildNodes();
    children.shift();
    children.pop();
    for (_i = 0, _len = children.length; _i < _len; _i++) {
      child = children[_i];
      this.start.parentNode.removeChild(child);
    }
    return children;
  };

  /*
  */


  Section.prototype.append = function() {
    var children;

    children = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this._insertAfter(children, this.end.previousSibling);
  };

  /*
  */


  Section.prototype.prepend = function() {
    var children;

    children = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this._insertAfter(children, this.start);
  };

  /*
  */


  Section.prototype.replaceChildNodes = function() {
    this.removeAll();
    return this.append.apply(this, arguments);
  };

  /*
  */


  Section.prototype.toString = function() {
    var buffer;

    buffer = this.getChildNodes().map(function(node) {
      return node.innerHTML || String(node);
    });
    return buffer.join("");
  };

  /*
  */


  Section.prototype.toFragment = function() {
    return this.nodeFactory.createFragment(this.getChildNodes());
  };

  /*
  */


  Section.prototype.dispose = function() {
    var child, _i, _len, _ref, _results;

    _ref = this.getChildNodes();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      _results.push(child.parentNode.removeChild(child));
    }
    return _results;
  };

  /*
  */


  Section.prototype.getChildNodes = function() {
    var children, cn, end;

    this._addParent();
    cn = this.start;
    end = this.end.nextSibling;
    children = [];
    while (cn !== end) {
      children.push(cn);
      cn = cn.nextSibling;
    }
    return children;
  };

  /*
  */


  Section.prototype._insertAfter = function(newNodes, refNode) {
    newNodes = newNodes.map(function(node) {
      if (node.__isLoafSection) {
        return node.toFragment();
      } else {
        return node;
      }
    });
    if (newNodes.length > 1) {
      newNodes = this.nodeFactory.createFragment(newNodes);
    } else {
      newNodes = newNodes[0];
    }
    this._addParent();
    return refNode.parentNode.insertBefore(newNodes, refNode.nextSibling);
  };

  /*
  */


  Section.prototype._addParent = function() {
    var parent;

    if (!this.start.parentNode) {
      parent = this.nodeFactory.createElement("div");
      parent._loaf = this;
      parent.appendChild(this.start);
      return parent.appendChild(this.end);
    }
  };

  return Section;

})();

module.exports = Section;
